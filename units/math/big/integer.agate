# SPDX-License-Identifier: MIT
# Copyright (c) 2022 Julien Bernard
#
# Big integer

foreign class Integer {
  construct new() foreign
  construct new(input) foreign
  construct new(input, base) foreign

  positive foreign
  is_zero foreign

  + foreign
  - foreign

  +(other) foreign
  -(other) foreign
  *(other) foreign
  /(other) foreign
  %(other) foreign

  cmp(other) foreign

  ==(other) { .cmp(other) == 0 }
  !=(other) { .cmp(other) != 0 }
  <(other) { .cmp(other) < 0 }
  <=(other) { .cmp(other) <= 0 }
  >(other) { .cmp(other) > 0 }
  >=(other) { .cmp(other) >= 0 }

  to_s { .to_s(10) }
  to_s(base) foreign

#   to_i {
#     if (@positive) {
#       if (this <= Int.MAX) {
#         return __Basic.to_i(@digits)
#       }
#     } else {
#       if (this >= Int.MIN + 1) {
#         return -__Basic.to_i(@digits)
#       }
#     }
#     System.abort("Value of Integer does not fit in an Int.")
#   }

  static div(lhs, rhs) foreign

  static gcd(a, b) {
    while (!b.is_zero) {
      def tmp = b
      b = a % b
      a = tmp
    }
    if (!a.positive) {
      return -a
    }
    return a
  }

  static exp(x, n) {
    assert(n.positive, "n should be positive")
    if (n.is_zero) {
      return Integer.new(1)
    }
    def y = Integer.new(1)
    while (n > 1) {
      def qr = .div(n, Integer.new(2))
      if (qr[1].is_zero) {
        x = x * x
      } else {
        y = y * x
        x = x * x
      }
      n = qr[0]
    }
    return x * y
  }
}
