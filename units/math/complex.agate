# SPDX-License-Identifier: MIT
# Copyright (c) 2022 Julien Bernard
#
# Complex

class Complex {
  construct new(real, imag) {
    assert(real is Float, "Real should be a Float.")
    assert(imag is Float, "Imag should be a Float.")
    @real = real
    @imag = imag
  }

  construct new(real) {
    assert(real is Float, "Real should be a Float.")
    @real = real
    @imag = 0.0
  }

  construct polar(radius, theta) {
    @real = radius * Math.cos(theta)
    @imag = radius * Math.sin(theta)
  }

  real { @real }
  imag { @imag }

  - { Complex.new(-@real, -@imag) }

  +(other) {
    if (other is Float) {
      other = Complex.new(other)
    }
    return Complex.new(@real + other.real, @imag + other.imag)
  }

  -(other) {
    if (other is Float) {
      other = Complex.new(other)
    }
    return Complex.new(@real - other.real, @imag - other.imag)
  }

  *(other) {
    if (other is Float) {
      other = Complex.new(other)
    }
    Complex.new(@real * other.real - @imag * other.imag, @real * other.imag + @imag * other.real)
  }

  /(other) {
    if (other is Float) {
      other = Complex.new(1.0 / other)
    } else {
      assert(other is Complex, "Other should be a Complex.")
      other = other.inverse
    }
    Complex.new(@real * other.real - @imag * other.imag, @real * other.imag + @imag * other.real)
  }

  ==(other) { @real == other.real && @imag == other.imag }
  !=(other) { @real != other.real || @imag != other.imag }

  inverse {
    def den = @real * @real + @imag * @imag
    return Complex.new(@real / den, -@imag / den)
  }

}
