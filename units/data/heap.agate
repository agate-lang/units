# SPDX-License-Identifier: MIT
# Copyright (c) 2022 Julien Bernard
#
# Heap, Priority queue

def __default_heap_compare(a, b) { a < b }

class Heap {
  construct new() {
    @data = []
    @comp = __default_heap_compare
  }

  construct new(comp) {
    @data = []
    @comp = comp
  }

  empty { @data.empty }
  size { @data.size }

  top { @data[0] }

  push(item) {
    def i = @data.size
    @data.append(item)
    while (i > 0) {
      def j = (i - 1) / 2
      if (@comp(@data[i], @data[j])) {
        return
      }
      @data.swap(i, j)
      i = j
    }
  }

  pop() {
    @data[0] = @data[-1]
    def max = (@data.size - 1) / 2
    def i = 0
    while (i < max) {
      def lt = 2 * i + 1
      assert(lt < @data.size, "lt")
      def rt = 2 * i + 2
      assert(rt < @data.size, "rt")
      if (@comp(@data[lt], @data[i]) && @comp(@data[rt], @data[i])) {
        break
      }
      def j = @comp(@data[lt], @data[rt]) ? rt : lt
      @data.swap(i, j)
      i = j
    }
    @data.erase(-1)
  }

  to_a { @data[0..-1] }
  to_s { "<%(@data.join(", "))>" }

  static sort(seq, comp) {
    def h = Heap.new(comp)
    for (item in seq) {
      h.push(item)
    }
    def res = []
    while (!h.empty) {
      res.append(h.top)
      h.pop()
    }
    res.reverse()
    return res
  }

  static sort(seq) { .sort(seq, __default_heap_compare) }
}

class PriorityQueue is Heap {
  construct new() { super() }
  construct new(comp) { super(comp) }
}
