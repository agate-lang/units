# SPDX-License-Identifier: MIT
# Copyright (c) 2022 Julien Bernard
#
# Doubly-linked list

class __ListNode {
  construct new(prev, next, data) {
    @prev = prev
    @next = next
    @data = data
  }
  prev { @prev }
  prev=(node) { @prev = node }
  next { @next }
  next=(node) { @next = node }
  data { @data }
  data=(data) { @data = data }
}

class List is Sequence {
  construct new() {
    @head = nil
    @tail = nil
  }

  append(data) {
    def node = __ListNode.new(@tail, nil, data)
    @tail = node
    if (@head == nil) {
      @head = node
    }
  }

  prepend(data) {
    def node = __ListNode.new(nil, @head, data)
    @head = node
    if (@tail == nil) {
      @tail = node
    }
  }

  iterate(iterator) {
    if (iterator == nil) {
      return @head
    }
    assert(iterator is __ListNode, "Iterator should be a list node.")
    return iterator.next
  }

  iterator_value(iterator) {
    assert(iterator is __ListNode, "Iterator should be a list node.")
    return iterator.data
  }

  __remove_node(node) {
    assert(node is __ListNode, "Iterator should be a list node.")
    if (node.prev != nil) {
      node.prev.next = node.next
    } else {
      @head = node.next
    }
    if (node.next != nil) {
      node.next.prev = node.prev
    } else {
      @tail = node.prev
    }
  }

}
